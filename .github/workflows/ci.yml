name: Java CI + Code Coverage

on:
  push:
    branches: [ "**" ]
  pull_request:
    branches: [ "**" ]

env:
  KAFKA_BOOTSTRAP_SERVERS: localhost:9092
  POSTGRES_URL: jdbc:postgresql://localhost:5432/spacebattle
  POSTGRES_USER: space
  POSTGRES_PASSWORD: battle

jobs:
  build:
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: ${{ env.POSTGRES_USER }}
          POSTGRES_PASSWORD: ${{ env.POSTGRES_PASSWORD }}
          POSTGRES_DB: spacebattle
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

      zookeeper:
        image: confluentinc/cp-zookeeper:7.3.0
        env:
          ZOOKEEPER_CLIENT_PORT: 2181
        ports:
          - 2181:2181

      kafka:
        image: confluentinc/cp-kafka:7.3.0
        env:
          KAFKA_BROKER_ID: 1
          KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
          KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
          KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092,PLAINTEXT_HOST://localhost:9092
          KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
        ports:
          - 9092:9092

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up JDK 19
        uses: actions/setup-java@v4
        with:
          java-version: '19'
          distribution: 'temurin'
          cache: 'maven'

      - name: Install parent pom
        run: mvn -N install

      - name: Build core
        run: mvn -f core/pom.xml clean install -DskipTests

      - name: Build server
        run: mvn -f server/pom.xml clean install -DskipTests

      - name: Build and test all remaining modules with coverage
        run: |
          for d in *; do
            if [ -f "$d/pom.xml" ] && [ "$d" != "core" ] && [ "$d" != "server" ] && [ "$d" != "coverage-report" ]; then
              echo "Building $d"
              mvn -f "$d/pom.xml" clean verify org.jacoco:jacoco-maven-plugin:prepare-agent \
                -Dspring.datasource.url=${{ env.POSTGRES_URL }} \
                -Dspring.datasource.username=${{ env.POSTGRES_USER }} \
                -Dspring.datasource.password=${{ env.POSTGRES_PASSWORD }} \
                -DKAFKA_BOOTSTRAP_SERVERS=${{ env.KAFKA_BOOTSTRAP_SERVERS }} || true
            fi
          done

      - name: Generate aggregate report
        run: mvn -f coverage-report/pom.xml verify

      - name: Upload aggregated coverage report
        uses: actions/upload-artifact@v4
        with:
          name: jacoco-aggregate-report
          path: coverage-report/target/site/jacoco-aggregate

      - name: Display coverage
        run: |
          echo "### Coverage Summary" >> $GITHUB_STEP_SUMMARY
          echo "| Module | Line Coverage | Branch Coverage |" >> $GITHUB_STEP_SUMMARY
          echo "|--------|--------------:|----------------:|" >> $GITHUB_STEP_SUMMARY

          if [ -f "coverage-report/target/site/jacoco-aggregate/jacoco.csv" ]; then
            # Покажем содержимое файла для отладки
            echo "--- jacoco.csv content ---"
            cat coverage-report/target/site/jacoco-aggregate/jacoco.csv
            echo "--- end of jacoco.csv ---"

            awk -F, '
              BEGIN { OFS = "," }
              NR>1 && ($1 == "All classes" || $1 == "Total") {
                total = $4 + $5;
                if (total > 0) {
                  line = $5 * 100 / total;
                  branch_total = $6 + $7;
                  branch = branch_total > 0 ? $7 * 100 / branch_total : 0;
                  printf "| All Modules | %.2f%% | %.2f%% |\n", line, branch;
                }
              }
            ' "coverage-report/target/site/jacoco-aggregate/jacoco.csv" >> $GITHUB_STEP_SUMMARY
          else
            echo "jacoco.csv not found!" >> $GITHUB_STEP_SUMMARY
          fi

          cat $GITHUB_STEP_SUMMARY
      


