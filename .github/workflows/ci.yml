name: Java CI + Code Coverage

on:
  push:
    branches: [ "**" ]
  pull_request:
    branches: [ "**" ]

env:
  KAFKA_BOOTSTRAP_SERVERS: localhost:9092
  POSTGRES_URL: jdbc:postgresql://localhost:5432/spacebattle
  POSTGRES_USER: space
  POSTGRES_PASSWORD: battle

jobs:
  build:
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: ${{ env.POSTGRES_USER }}
          POSTGRES_PASSWORD: ${{ env.POSTGRES_PASSWORD }}
          POSTGRES_DB: spacebattle
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

      zookeeper:
        image: confluentinc/cp-zookeeper:7.3.0
        env:
          ZOOKEEPER_CLIENT_PORT: 2181
        ports:
          - 2181:2181

      kafka:
        image: confluentinc/cp-kafka:7.3.0
        env:
          KAFKA_BROKER_ID: 1
          KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
          KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
          KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092,PLAINTEXT_HOST://localhost:9092
          KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
        ports:
          - 9092:9092

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up JDK 19
        uses: actions/setup-java@v4
        with:
          java-version: '19'
          distribution: 'temurin'
          cache: 'maven'

      - name: Cache Maven dependencies
        uses: actions/cache@v4
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-maven

      - name: Build and install core
        run: mvn -f core/pom.xml clean install

      - name: Build and install server
        run: mvn -f server/pom.xml clean install

      - name: Build and test with coverage
        run: |
          # Сначала собираем все модули с покрытием
          for d in *; do
            if [ -f "$d/pom.xml" ] && [ "$d" != "core" ] && [ "$d" != "server" ] && [ "$d" != "coverage-report" ]; then
              echo "=== Building $d ==="
              mvn -f "$d/pom.xml" clean org.jacoco:jacoco-maven-plugin:prepare-agent verify \
                -Dspring.datasource.url=${{ env.POSTGRES_URL }} \
                -Dspring.datasource.username=${{ env.POSTGRES_USER }} \
                -Dspring.datasource.password=${{ env.POSTGRES_PASSWORD }} \
                -DKAFKA_BOOTSTRAP_SERVERS=${{ env.KAFKA_BOOTSTRAP_SERVERS }} || true
            fi
          done

          # Затем генерируем сводный отчёт
          echo "=== Generating aggregate report ==="
          mvn org.jacoco:jacoco-maven-plugin:report-aggregate

      - name: Upload aggregate report
        uses: actions/upload-artifact@v4
        with:
          name: coverage-aggregate
          path: target/site/jacoco-aggregate
          retention-days: 7

      - name: Parse and display coverage summary
        if: always()
        run: |
          echo "### Coverage Summary" >> $GITHUB_STEP_SUMMARY
          echo "| Module | Line Coverage | Branch Coverage |" >> $GITHUB_STEP_SUMMARY
          echo "|--------|--------------:|----------------:|" >> $GITHUB_STEP_SUMMARY

          # Парсим сводный отчёт
          if [ -f "target/site/jacoco-aggregate/jacoco.csv" ]; then
            {
              read -r
              while IFS=',' read -r group package class ins_missed ins_covered branch_missed branch_covered; do
                if [[ "$group" == "Total" && "$package" == "" ]]; then
                  total_ins=$((ins_covered + ins_missed))
                  if [ "$total_ins" -eq 0 ]; then
                    line_cov="N/A"
                  else
                    line_cov=$(echo "scale=2; $ins_covered*100/$total_ins" | bc)
                  fi

                  total_br=$((branch_covered + branch_missed))
                  if [ "$total_br" -eq 0 ]; then
                    br_cov="N/A"
                  else
                    br_cov=$(echo "scale=2; $branch_covered*100/$total_br" | bc)
                  fi

                  echo "| All Modules | ${line_cov}% | ${br_cov}% |" >> $GITHUB_STEP_SUMMARY
                  break
                fi
              done
            } < "target/site/jacoco-aggregate/jacoco.csv"
          fi

          # Добавляем данные по каждому модулю
          for csv_file in $(find . -path "*/target/site/jacoco/jacoco.csv"); do
            module=$(dirname $(dirname $(dirname $(dirname $csv_file))))
            module=${module#./}

            {
              read -r
              while IFS=',' read -r group package class ins_missed ins_covered branch_missed branch_covered; do
                if [[ "$group" == "Total" && "$package" == "" ]]; then
                  total_ins=$((ins_covered + ins_missed))
                  if [ "$total_ins" -eq 0 ]; then
                    line_cov="N/A"
                  else
                    line_cov=$(echo "scale=2; $ins_covered*100/$total_ins" | bc)
                  fi

                  total_br=$((branch_covered + branch_missed))
                  if [ "$total_br" -eq 0 ]; then
                    br_cov="N/A"
                  else
                    br_cov=$(echo "scale=2; $branch_covered*100/$total_br" | bc)
                  fi

                  echo "| $module | ${line_cov}% | ${br_cov}% |" >> $GITHUB_STEP_SUMMARY
                  break
                fi
              done
            } < "$csv_file"
          done

          cat $GITHUB_STEP_SUMMARY
